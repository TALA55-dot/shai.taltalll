# -*- coding: utf-8 -*-
"""Tala Qalaia

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pjJMSnFQuLUgO-7mgtge8Ju5Rc-p2ZFz
"""

df = pd.read_csv('Salaries.csv')

print("Number of rows:", df.shape[0])
print("Number of columns:", df.shape[1])

print("\nData types:")
print(df.dtypes)

print("\nMissing values:")
print(df.isnull().sum())

mean_BasePay = df['BasePay'].mean()
median_BasePay = df['BasePay'].median()
mode_BasePay = df['BasePay'].mode()[0]
min_BasePay = df['BasePay'].min()
max_BasePay = df['BasePay'].max()
BasePay_range = max_BasePay - min_BasePay
std_dev_BasePay = df['BasePay'].std()

# Print the basic statistics
print("\nBasic Statistics:")
print("Mean BasePay:", mean_BasePay)
print("Median BasePay:", median_BasePay)
print("Mode BasePay:", mode_BasePay)
print("Minimum BasePay:", min_BasePay)
print("Maximum BasePay:", max_BasePay)
print("BasePay Range:", BasePay_range)
print("Standard Deviation of BasePay:", std_dev_BasePay)

df['BasePay'].fillna(mean_BasePay, inplace=True)

plt.figure(figsize=(10, 6))
sns.histplot(df['BasePay'], bins=20, kde=True)
plt.title('Distribution of BasePay')
plt.xlabel('BasePay')
plt.ylabel('Frequency')
plt.show()

df_cleaned = df.dropna()

df_cleaned = df.fillna(df.mean())

# Histogram for salary distribution
plt.figure(figsize=(10, 6))
sns.histplot(df_cleaned['BasePay'], bins=30, kde=True, color='skyblue')
plt.title('BasePay Distribution')
plt.xlabel('BasePay')
plt.ylabel('Frequency')
plt.show()

# Create histograms to visualize the distribution of salaries
plt.figure(figsize=(10, 6))
sns.histplot(df['BasePay'], bins=20, kde=True, color='skyblue')
plt.title('Distribution of Salaries')
plt.xlabel('BasePay')
plt.ylabel('Frequency')
plt.show()

# Create a pie chart to represent the proportion of employees in different job titles
plt.figure(figsize=(10, 8))
df['JobTitle'].value_counts().plot.pie(autopct='%1.1f%%', startangle=90)
plt.title('Proportion of Employees in Different Job Titles')
plt.show()

# Grouped Analysis
grouped_df = df.groupby('JobTitle')['BasePay'].agg(['mean', 'median', 'std', 'count']).reset_index()
print(grouped_df)

# Simple Correlation Analysis
correlation = df['BasePay'].corr(df['OvertimePay'])
print(f"Correlation between BasePay and OvertimePay: {correlation}")

# Scatter Plot
plt.figure(figsize=(10, 6))
sns.scatterplot(x='BasePay', y='OvertimePay', data=df, color='orange')
plt.title('Scatter Plot: BasePay vs OvertimePay')
plt.xlabel('BasePay')
plt.ylabel('OvertimePay')
plt.show()

df.dropna(inplace=True)
mean_value = df['BasePay'].mean()
df['BasePay'].fillna(mean_value, inplace=True)
df['BasePay'].fillna(0, inplace=True)

"""In this research, the dataset comprised several employee-related attributes, The dataset was examined to better understand its dimensions and contents, which revealed information about employees spanning several years. The mean, median, mode, minimum, maximum, range, and standard deviation of 'BasePay' were calculated. Missing data was addressed using an appropriate manner, . Basic data visualization techniques were used, such as histograms to illustrate the distribution of 'BasePay' and pie charts to show the relative representation of employees across different job titles. Grouped analysis made it easier to calculate summary statistics for specific categories, allowing for average salary comparisons."""